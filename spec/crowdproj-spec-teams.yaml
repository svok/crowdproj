openapi: 3.0.1
info:
  title: Crowdproj models
  description: 'This spec contains a [Crowdproj](http://crowdpwoj.com) project models and api description.'
  # termsOfService: http://swagger.io/terms/
  contact:
    email: sokatov@gmail.com
  license:
    name: Proprietar
    # url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
# externalDocs:
#   description: Find out more about Swagger
#   url: http://swagger.io
servers:
  - url: https://crowdproj.com/v1
  - url: http://localhost:8080
tags:
  - name: teams
    description: Full description of the teams
    # externalDocs:
    #   description: Find out more
    #   url: http://swagger.io
  - name: profiles
    description: Description of the user profiles
  - name: groups
    description: Definitions of the groups of users/teams
    # externalDocs:
    #   description: Find out more about our store
    #   url: http://swagger.io
paths:
  /teams:
    put:
      tags:
        - team
      summary: Update an existing team
      operationId: updateTeam
      requestBody:
        description: Team object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiQueryTeamSave'
          application/xml:
            schema:
              $ref: '#/components/schemas/ApiQueryTeamSave'
          text/plain:
            schema:
              type: string
        required: true
      responses:
        200:
          description: Success
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseTeam'
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiResponseTeam'
            text/plain:
              schema:
                type: string
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Team not found
          content: {}
        405:
          description: Validation exception
          content: {}
      security:
        - crowdproj_auth:
            - write:teams
            - read:teams
      x-codegen-request-body-name: body
    post:
      tags:
        - team
      summary: Add a new team to the store
      operationId: addTeam
      requestBody:
        description: Team object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiQueryTeamSave'
          application/xml:
            schema:
              $ref: '#/components/schemas/ApiQueryTeamSave'
        required: true
      responses:
        200:
          description: Successful operation

        405:
          description: Invalid input
          content: {}
      security:
        - crowdproj_auth:
            - write:teams
            - read:teams
      x-codegen-request-body-name: body
  /teams/find:
    post:
      tags:
        - team
      summary: "List teams"
      description: "Get team satisfying request filter"
      operationId: findTeams
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TeamStatus'
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
      requestBody:
        description: Team object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiQueryTeamFind'
          application/xml:
            schema:
              $ref: '#/components/schemas/ApiQueryTeamFind'
        required: true

      responses:
        200:
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponseTeam'
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseTeam'
        400:
          description: Invalid status value
          content: {}
      security:
        - crowdproj_auth:
            - write:teams
            - read:teams

  /teams/{teamId}:
    get:
      tags:
        - team
      summary: Find team by ID
      description: Returns a single team
      operationId: getTeamById
      parameters:
        - name: teamId
          in: path
          description: ID of the team to return
          required: true
          schema:
            type: string
        - name: stub
          in: query
          description: "Simulate server activity instead of real performance and return a pre-stored request result"
          required: false
          allowEmptyValue: true
          schema:
            type: string
            enum:
              - none
              - public
              - private
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseTeam'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponseTeam'
        # 400:
        #   description: Invalid ID supplied
        #   content: {}
        # 404:
        #   description: Team not found
        #   content: {}
    #      security:
    #        - api_key: []
    delete:
      tags:
        - team
      summary: Deletes a team
      operationId: deleteTeam
      parameters:
        - name: api_key
          in: header
          schema:
            type: string
        - name: teamId
          in: path
          description: Team id to delete
          required: true
          schema:
            type: string
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Team not found
          content: {}
      security:
        - crowdproj_auth:
            - write:teams
            - read:teams
  /teams/{teamId}/uploadImage:
    post:
      tags:
        - team
      summary: uploads an image
      operationId: uploadFile
      parameters:
        - name: teamId
          in: path
          description: ID of team to update
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
        - crowdproj_auth:
            - write:teams
            - read:teams
  # /store/inventory:
  #   get:
  #     tags:
  #       - store
  #     summary: Returns team inventories by status
  #     description: Returns a map of status codes to quantities
  #     operationId: getInventory
  #     responses:
  #       200:
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               additionalProperties:
  #                 type: integer
  #                 format: int32
  #     security:
  #       - api_key: []
  # /store/order:
  #   post:
  #     tags:
  #       - store
  #     summary: Place an order for a team
  #     operationId: placeOrder
  #     requestBody:
  #       description: order placed for purchasing the team
  #       content:
  #         '*/*':
  #           schema:
  #             $ref: '#/components/schemas/Order'
  #       required: true
  #     responses:
  #       200:
  #         description: successful operation
  #         content:
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/Order'
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Order'
  #       400:
  #         description: Invalid Order
  #         content: {}
  #     x-codegen-request-body-name: body
  # /store/order/{orderId}:
  #   get:
  #     tags:
  #       - store
  #     summary: Find purchase order by ID
  #     description: For valid response try integer IDs with value >= 1 and <= 10.         Other
  #       values will generated exceptions
  #     operationId: getOrderById
  #     parameters:
  #       - name: orderId
  #         in: path
  #         description: ID of team that needs to be fetched
  #         required: true
  #         schema:
  #           maximum: 10.0
  #           minimum: 1.0
  #           type: integer
  #           format: int64
  #     responses:
  #       200:
  #         description: successful operation
  #         content:
  #           application/xml:
  #             schema:
  #               $ref: '#/components/schemas/Order'
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Order'
  #       400:
  #         description: Invalid ID supplied
  #         content: {}
  #       404:
  #         description: Order not found
  #         content: {}
  #   delete:
  #     tags:
  #       - store
  #     summary: Delete purchase order by ID
  #     description: For valid response try integer IDs with positive integer value.         Negative
  #       or non-integer values will generate API errors
  #     operationId: deleteOrder
  #     parameters:
  #       - name: orderId
  #         in: path
  #         description: ID of the order that needs to be deleted
  #         required: true
  #         schema:
  #           minimum: 1.0
  #           type: integer
  #           format: int64
  #     responses:
  #       400:
  #         description: Invalid ID supplied
  #         content: {}
  #       404:
  #         description: Order not found
  #         content: {}
  /profile:
    post:
      tags:
        - profile
      summary: Create profile
      description: This can only be done by the logged in profile.
      operationId: createProfile
      requestBody:
        description: Created profile object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Profile'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /profile/createWithArray:
    post:
      tags:
        - profile
      summary: Creates list of profiles with given input array
      operationId: createProfilesWithArrayInput
      requestBody:
        description: List of profile object
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Profile'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /profile/createWithList:
    post:
      tags:
        - profile
      summary: Creates list of profiles with given input array
      operationId: createProfilesWithListInput
      requestBody:
        description: List of profile object
        content:
          '*/*':
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Profile'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /profile/login:
    get:
      tags:
        - profile
      summary: Logs profile into the system
      operationId: loginProfile
      parameters:
        - name: profilename
          in: query
          description: The profile name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the profile
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        400:
          description: Invalid profilename/password supplied
          content: {}
  /profile/logout:
    get:
      tags:
        - profile
      summary: Logs out current logged in profile session
      operationId: logoutProfile
      responses:
        default:
          description: successful operation
          content: {}
  /profile/{username}:
    get:
      tags:
        - profile
      summary: Get profile by user name
      operationId: getProfileByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: Profile not found
          content: {}
    put:
      tags:
        - profile
      summary: Updated profile
      description: This can only be done by the logged in profile.
      operationId: updateProfile
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Profile'
        required: true
      responses:
        400:
          description: Invalid profile supplied
          content: {}
        404:
          description: Profile not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
        - profile
      summary: Delete profile
      description: This can only be done by the logged in profile.
      operationId: deleteProfile
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: Profile not found
          content: {}
components:
  schemas:
    Profile:
      type: object
      properties:
        id:
          type: string
        alias:
          type: string
        fName:
          type: string
        lName:
          type: string
        mName:
          type: string
        email:
          type: string
        phone:
          type: string
        profileStatus:
          $ref: '#/components/schemas/ProfileStatus'
      xml:
        name: Profile

    ProfileStatus:
      type: string
      description: Profile Status
      enum:
        - profileClosed
        - profileActive
        - profileDeleted

    Tag:
      type: object
      properties:
        id:
          type: string
          description: "Tag's ID that is used in DB and communications"
        name:
          type: string
          description: "The tag name that is shown to users"
        description:
          type: string
          description: "The description of the tag"
      xml:
        name: Tag

    Team:
      required:
        - name
        - summary
      type: object
      properties:
        id:
          type: string
          example: "123-456-789-dsfl-lkow"
        #        category:
        #          $ref: '#/components/schemas/Category'
        name:
          type: string
          description: "Name qualifying the team"
          example: "New York swimming team"
        summary:
          type: string
          description: "A brief description for the team to be shown in the list of teams"
          example: "We are the swimming team. We do swimming sports etc..."
        description:
          type: string
          description: "The team description field in markdown format."
          example: "# New York swimming team\n\nYou are **welcome** ..."
        owner:
          $ref: '#/components/schemas/Profile'
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        visibility:
          $ref: '#/components/schemas/TeamVisibility'
        joinability:
          $ref: '#/components/schemas/TeamJoinability'
        status:
          $ref: '#/components/schemas/TeamStatus'
      xml:
        name: Team

    TeamVisibility:
      type: string
      description: Visibility type of the team
      enum:
        - teamPublic
        - teamRegisteredOnly
        - teamGroupOnly
        - teamMembersOnly

    TeamJoinability:
      type: string
      description: How users can join this team
      enum:
        - byOwner
        - byMember
        - byUser

    TeamStatus:
      type: string
      description: team status in the store
      enum:
        - active
        - pending
        - closed
        - deleted


    ApiQuery:
      type: object
      description: "Basic query structure that must be sent to request some fuctionality from the server"
      properties:
        stub:
          type: string
          description: "The request requires not normal operation but a stub data from the server"
        debug:
          type: string
          description: "Request a debug information from the server"

    ApiQueryTeamFind:
      allOf:
        - $ref: '#/components/schemas/ApiQuery'
        - type: object
          properties:
            tagIds:
              type: array
              items:
                type: string

    ApiQueryTeamSave:
      allOf:
        - $ref: '#/components/schemas/ApiQuery'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Team'

    ApiResponse:
      type: object
      description: "Basic response structure that to be received from the server due to API request"
      properties:
        timeReceived:
          type: string
          example: "2019-02-03T16:17:18.000Z"
        timeFinished:
          type: string
          example: "2019-02-03T16:17:18.100Z"
        status:
          type: string
          description: "Result of the request handling by server"
          example: "responseOk"
          enum:
            - responseOk
            - responseError
        errors:
          type: array
          description: "Errors, warnings and info messages concerning the response"
          items:
            $ref: '#/components/schemas/ApiError'
        debug:
          type: object

    ApiResponseTeam:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Team'


    ApiError:
      type: object
      description: "Error description"
      properties:
        code:
          type: string
          description: "Error code"
          example: "validation-invalid-symbols"
        field:
          type: string
          description: "Field the error concerns to"
          example: "firstName"
        message:
          type: string
          description: "Short message describing the error"
          example: "Field must contain only letters and -' symbols"
        description:
          type: string
          description: "Extended description of the error"
          example: "The field firstName must contain only letter, i.e. symbols a-z, А-Я, etc. Also \"-\" (dash) and \"'\" (single quotation) are allowed. Examples: Johnes, O'neil, Frederic-Rich"
        level:
          type: string
          description: "Error level"
          example: "error"
          enum:
            - fatal
            - error
            - warning
            - info
            - hint

  securitySchemes:
    crowdproj_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://teamstore.swagger.io/oauth/dialog
          scopes:
            write:teams: modify teams in your account
            read:teams: read your teams
        authorizationCode:
          authorizationUrl: https://example.com/oauth/authorize
          tokenUrl: https://example.com/oauth/token
          scopes:
            read: Grants read access
            write: Grants write access
            admin: Grants access to admin operations
    api_key:
      type: apiKey
      name: api_key
      in: header
