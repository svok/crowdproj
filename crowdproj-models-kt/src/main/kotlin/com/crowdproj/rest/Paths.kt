/**
* Crowdproj models
* This spec contains a [Crowdproj](http://crowdpwoj.com) project models and api description.
*
* The version of the OpenAPI document: 0.0.1
* Contact: sokatov@gmail.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.crowdproj.rest

import com.crowdproj.rest.models.TeamStatus
import io.ktor.locations.KtorExperimentalLocationsAPI
import io.ktor.locations.Location

object Paths {
    /**
     * Delete profile
     * This can only be done by the logged in profile.
     * @param username The name that needs to be deleted 
     */
    @KtorExperimentalLocationsAPI
    @Location("/profile/{username}") class deleteProfile(val username: kotlin.String)

    /**
     * Get profile by user name
     * 
     * @param username The name that needs to be fetched. Use user1 for testing.  
     */
    @KtorExperimentalLocationsAPI
    @Location("/profile/{username}") class getProfileByName(val username: kotlin.String)

    /**
     * Logs profile into the system
     * 
     * @param profilename The profile name for login 
     * @param password The password for login in clear text 
     */
    @KtorExperimentalLocationsAPI
    @Location("/profile/login") class loginProfile(val profilename: kotlin.String, val password: kotlin.String)

    /**
     * Logs out current logged in profile session
     * 
     */
    @KtorExperimentalLocationsAPI
    @Location("/profile/logout") class logoutProfile()

    /**
     * Deletes a team
     * 
     * @param teamId Team id to delete 
     * @param apiKey  (optional)
     */
    @KtorExperimentalLocationsAPI
    @Location("/team/{teamId}") class deleteTeam(val teamId: kotlin.String, val apiKey: kotlin.String)

    /**
     * Find team by ID
     * Returns a single team
     * @param teamId ID of the team to return 
     * @param stub Simulate server activity instead of real performance and return a pre-stored request result (optional)
     */
    @KtorExperimentalLocationsAPI
    @Location("/team/{teamId}") class getTeamById(val teamId: kotlin.String, val stub: kotlin.String? = null)

    /**
     * Get user&#39;s teams
     * Get teams the user relates to with the ability to filter them by status, tags and other parameters
     * @param status Status values that need to be considered for filter (optional)
     * @param tags Tags to filter by (optional)
     */
    @KtorExperimentalLocationsAPI
    @Location("/team/getUserTeams") class getUserTeams(val status: kotlin.Array<TeamStatus>, val tags: kotlin.Array<kotlin.String>)

}
